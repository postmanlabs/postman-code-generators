{
  "Request Headers": "import retrofit2.Call\nimport retrofit2.http.*\nimport retrofit2.Callback\nimport retrofit2.Response\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\n\nfun main() {\n  val headers = mapOf(\n    \"my-sample-header\" to \"Lorem ipsum dolor sit amet\",\n    \"testing\" to \"\\'singlequotes\\'\",\n    \"TEST\" to \"\\\"doublequotes\\\"\"\n  )\n  \n  val retrofit = Retrofit.Builder()\n    .baseUrl(\"https://mockbin.org\")\n    .addConverterFactory(GsonConverterFactory.create())\n    .build()\n  \n  val service = retrofit.create(MockbinService::class.java)\n  val serviceCall = service.postRequest(headers)\n  \n  serviceCall.enqueue(object : Callback<Any> {\n    override fun onResponse(call: Call<Any>, response: Response<Any>) {\n      println(\"Request success with response: ${response.body()}\")\n    }\n  \n    override fun onFailure(call: Call<Any>, t: Throwable) {\n      println(\"Request has been failed for ${t.message} reason. $t\")\n    }\n  })\n  \n}\n\n@JvmSuppressWildcards\ninterface MockbinService {\n  @POST(\"request\")\n  fun postRequest(@HeaderMap headers: Map<String, String>): Call<Any>\n}\n",
  "Request Headers (With special Characters)": "import retrofit2.Call\nimport retrofit2.http.*\nimport retrofit2.Callback\nimport retrofit2.Response\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\n\nfun main() {\n  val headers = mapOf(\n    \"my-sample-header\" to \"Lorem ipsum dolor sit amet\",\n    \"TEST\" to \"@#\\$%^&*()\",\n    \"more\" to \",./\\';[]}{\\\":?><|\\\\\\\\\"\n  )\n  \n  val retrofit = Retrofit.Builder()\n    .baseUrl(\"https://postman-echo.com\")\n    .addConverterFactory(GsonConverterFactory.create())\n    .build()\n  \n  val service = retrofit.create(PostmanEchoService::class.java)\n  val serviceCall = service.getHeaders(headers)\n  \n  serviceCall.enqueue(object : Callback<Any> {\n    override fun onResponse(call: Call<Any>, response: Response<Any>) {\n      println(\"Request success with response: ${response.body()}\")\n    }\n  \n    override fun onFailure(call: Call<Any>, t: Throwable) {\n      println(\"Request has been failed for ${t.message} reason. $t\")\n    }\n  })\n  \n}\n\n@JvmSuppressWildcards\ninterface PostmanEchoService {\n  @GET(\"headers\")\n  fun getHeaders(@HeaderMap headers: Map<String, String>): Call<Any>\n}\n",
  "Request Headers with disabled headers": "import retrofit2.Call\nimport retrofit2.http.*\nimport retrofit2.Callback\nimport retrofit2.Response\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\n\nfun main() {\n  val headers = mapOf(\n    \"my-sample-header\" to \"Lorem ipsum dolor sit amet\",\n    \"not-disabled-header\" to \"ENABLED\"\n  )\n  \n  val retrofit = Retrofit.Builder()\n    .baseUrl(\"https://postman-echo.com\")\n    .addConverterFactory(GsonConverterFactory.create())\n    .build()\n  \n  val service = retrofit.create(PostmanEchoService::class.java)\n  val serviceCall = service.getHeaders(headers)\n  \n  serviceCall.enqueue(object : Callback<Any> {\n    override fun onResponse(call: Call<Any>, response: Response<Any>) {\n      println(\"Request success with response: ${response.body()}\")\n    }\n  \n    override fun onFailure(call: Call<Any>, t: Throwable) {\n      println(\"Request has been failed for ${t.message} reason. $t\")\n    }\n  })\n  \n}\n\n@JvmSuppressWildcards\ninterface PostmanEchoService {\n  @GET(\"headers\")\n  fun getHeaders(@HeaderMap headers: Map<String, String>): Call<Any>\n}\n",
  "GET Request with disabled query": "import retrofit2.Call\nimport retrofit2.http.*\nimport retrofit2.Callback\nimport retrofit2.Response\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\n\nfun main() {\n  \n  val retrofit = Retrofit.Builder()\n    .baseUrl(\"https://postman-echo.com\")\n    .addConverterFactory(GsonConverterFactory.create())\n    .build()\n  \n  val service = retrofit.create(PostmanEchoService::class.java)\n  val serviceCall = service.getGet()\n  \n  serviceCall.enqueue(object : Callback<Any> {\n    override fun onResponse(call: Call<Any>, response: Response<Any>) {\n      println(\"Request success with response: ${response.body()}\")\n    }\n  \n    override fun onFailure(call: Call<Any>, t: Throwable) {\n      println(\"Request has been failed for ${t.message} reason. $t\")\n    }\n  })\n  \n}\n\n@JvmSuppressWildcards\ninterface PostmanEchoService {\n  @GET(\"get\")\n  fun getGet(): Call<Any>\n}\n",
  "POST form data with special characters": "import retrofit2.Call\nimport retrofit2.http.*\nimport retrofit2.Callback\nimport retrofit2.Response\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\n\nfun main() {\n  val body = HashMap<String, RequestBody>()\n  val pl0 = RequestBody.create(MediaType.parse(\"text/plain\"), \"\\'a\\'\")\n  val qu1 = RequestBody.create(MediaType.parse(\"text/plain\"), \"\\\"b\\\"\")\n  val hdjkljh2 = RequestBody.create(MediaType.parse(\"text/plain\"), \"c\")\n  val sa3 = RequestBody.create(MediaType.parse(\"text/plain\"), \"d\")\n  val Special4 = RequestBody.create(MediaType.parse(\"text/plain\"), \"!@#\\$%&*()^_+=`~\")\n  val more6 = RequestBody.create(MediaType.parse(\"text/plain\"), \",./\\';[]}{\\\":?><|\\\\\\\\\")\n  \n  body.put(\"pl\", pl0)\n  body.put(\"qu\", qu1)\n  body.put(\"hdjkljh\", hdjkljh2)\n  body.put(\"sa\", sa3)\n  body.put(\"Special\", Special4)\n  body.put(\"more\", more6)\n  \n  val retrofit = Retrofit.Builder()\n    .baseUrl(\"https://postman-echo.com\")\n    .addConverterFactory(GsonConverterFactory.create())\n    .build()\n  \n  val service = retrofit.create(PostmanEchoService::class.java)\n  val serviceCall = service.postPost(body)\n  \n  serviceCall.enqueue(object : Callback<Any> {\n    override fun onResponse(call: Call<Any>, response: Response<Any>) {\n      println(\"Request success with response: ${response.body()}\")\n    }\n  \n    override fun onFailure(call: Call<Any>, t: Throwable) {\n      println(\"Request has been failed for ${t.message} reason. $t\")\n    }\n  })\n  \n}\n\n@JvmSuppressWildcards\ninterface PostmanEchoService {\n  @Multipart\n  @POST(\"post\")\n  fun postPost(@PartMap body: Map<String, RequestBody>): Call<Any>\n}\n",
  "Resolve URL (Quotes + Special Characters) Copy": "import retrofit2.Call\nimport retrofit2.http.*\nimport retrofit2.Callback\nimport retrofit2.Response\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\n\nfun main() {\n  val body = \"\"\"\"\"\"\n  val retrofit = Retrofit.Builder()\n    .baseUrl(\"https://postman-echo.com\")\n    .addConverterFactory(GsonConverterFactory.create())\n    .build()\n  \n  val service = retrofit.create(PostmanEchoService::class.java)\n  val serviceCall = service.postAction(body, \"post\")\n  \n  serviceCall.enqueue(object : Callback<Any> {\n    override fun onResponse(call: Call<Any>, response: Response<Any>) {\n      println(\"Request success with response: ${response.body()}\")\n    }\n  \n    override fun onFailure(call: Call<Any>, t: Throwable) {\n      println(\"Request has been failed for ${t.message} reason. $t\")\n    }\n  })\n  \n}\n\n@JvmSuppressWildcards\ninterface PostmanEchoService {\n  @POST(\"{action}\")\n  fun postAction(@Body body: String, @Path(\"action\") action: Any): Call<Any>\n}\n",
  "POST Raw Text": "import retrofit2.Call\nimport retrofit2.http.*\nimport retrofit2.Callback\nimport retrofit2.Response\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\n\nfun main() {\n  val headers = mapOf(\n    \"Content-Type\" to \"text/plain\"\n  )\n  val body = \"\"\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium. Praesent neque quam, tincidunt nec leo eget, rutrum vehicula magna.\\nMaecenas consequat elementum elit, id semper sem tristique et. Integer pulvinar enim quis consectetur interdum volutpat.!@#\\$%^&*()+POL:},\\'\\';,[;[;\"\"\"\n  val retrofit = Retrofit.Builder()\n    .baseUrl(\"https://postman-echo.com\")\n    .addConverterFactory(GsonConverterFactory.create())\n    .build()\n  \n  val service = retrofit.create(PostmanEchoService::class.java)\n  val serviceCall = service.postPost(headers, body)\n  \n  serviceCall.enqueue(object : Callback<Any> {\n    override fun onResponse(call: Call<Any>, response: Response<Any>) {\n      println(\"Request success with response: ${response.body()}\")\n    }\n  \n    override fun onFailure(call: Call<Any>, t: Throwable) {\n      println(\"Request has been failed for ${t.message} reason. $t\")\n    }\n  })\n  \n}\n\n@JvmSuppressWildcards\ninterface PostmanEchoService {\n  @POST(\"post\")\n  fun postPost(@HeaderMap headers: Map<String, String>, @Body body: String): Call<Any>\n}\n",
  "POST urlencoded data": "import retrofit2.Call\nimport retrofit2.http.*\nimport retrofit2.Callback\nimport retrofit2.Response\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\n\nfun main() {\n  val headers = mapOf(\n    \"Content-Type\" to \"application/x-www-form-urlencoded\"\n  )\n  val body = mapOf(\n    \"1\" to \"\\'a\\'\",\n    \"2\" to \"\\\"b\\\"\",\n    \"\\'3\\'\" to \"c\",\n    \"\\\"4\\\"\" to \"d\",\n    \"Special\" to \"!@#\\$%&*()^_=`~              \",\n    \"more\" to \",./\\';[]}{\\\":?><|\\\\\\\\    \"\n  )\n  val retrofit = Retrofit.Builder()\n    .baseUrl(\"https://postman-echo.com\")\n    .addConverterFactory(GsonConverterFactory.create())\n    .build()\n  \n  val service = retrofit.create(PostmanEchoService::class.java)\n  val serviceCall = service.postPost(headers, body)\n  \n  serviceCall.enqueue(object : Callback<Any> {\n    override fun onResponse(call: Call<Any>, response: Response<Any>) {\n      println(\"Request success with response: ${response.body()}\")\n    }\n  \n    override fun onFailure(call: Call<Any>, t: Throwable) {\n      println(\"Request has been failed for ${t.message} reason. $t\")\n    }\n  })\n  \n}\n\n@JvmSuppressWildcards\ninterface PostmanEchoService {\n  @POST(\"post\")\n  fun postPost(@HeaderMap headers: Map<String, String>, @Body body: Map<String, Any>): Call<Any>\n}\n",
  "POST json with raw": "import retrofit2.Call\nimport retrofit2.http.*\nimport retrofit2.Callback\nimport retrofit2.Response\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\n\nfun main() {\n  val headers = mapOf(\n    \"Content-Type\" to \"application/json\"\n  )\n  val body = \"\"\"{\\n  \\\"json\\\": \\\"Test-Test!@#\\$%^&*()+POL:},\\'\\';,[;[;:>\\\"\\n}\"\"\"\n  val retrofit = Retrofit.Builder()\n    .baseUrl(\"https://postman-echo.com\")\n    .addConverterFactory(GsonConverterFactory.create())\n    .build()\n  \n  val service = retrofit.create(PostmanEchoService::class.java)\n  val serviceCall = service.postPost(headers, body)\n  \n  serviceCall.enqueue(object : Callback<Any> {\n    override fun onResponse(call: Call<Any>, response: Response<Any>) {\n      println(\"Request success with response: ${response.body()}\")\n    }\n  \n    override fun onFailure(call: Call<Any>, t: Throwable) {\n      println(\"Request has been failed for ${t.message} reason. $t\")\n    }\n  })\n  \n}\n\n@JvmSuppressWildcards\ninterface PostmanEchoService {\n  @POST(\"post\")\n  fun postPost(@HeaderMap headers: Map<String, String>, @Body body: String): Call<Any>\n}\n",
  "POST javascript with raw": "import retrofit2.Call\nimport retrofit2.http.*\nimport retrofit2.Callback\nimport retrofit2.Response\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\n\nfun main() {\n  val headers = mapOf(\n    \"Content-Type\" to \"application/javascript\"\n  )\n  val body = \"\"\"var val = 6;\\nconsole.log(val);\"\"\"\n  val retrofit = Retrofit.Builder()\n    .baseUrl(\"https://postman-echo.com\")\n    .addConverterFactory(GsonConverterFactory.create())\n    .build()\n  \n  val service = retrofit.create(PostmanEchoService::class.java)\n  val serviceCall = service.postPost(headers, body)\n  \n  serviceCall.enqueue(object : Callback<Any> {\n    override fun onResponse(call: Call<Any>, response: Response<Any>) {\n      println(\"Request success with response: ${response.body()}\")\n    }\n  \n    override fun onFailure(call: Call<Any>, t: Throwable) {\n      println(\"Request has been failed for ${t.message} reason. $t\")\n    }\n  })\n  \n}\n\n@JvmSuppressWildcards\ninterface PostmanEchoService {\n  @POST(\"post\")\n  fun postPost(@HeaderMap headers: Map<String, String>, @Body body: String): Call<Any>\n}\n",
  "Resolve URL": "import retrofit2.Call\nimport retrofit2.http.*\nimport retrofit2.Callback\nimport retrofit2.Response\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\n\nfun main() {\n  val body = \"\"\"\"\"\"\n  val retrofit = Retrofit.Builder()\n    .baseUrl(\"https://postman-echo.com\")\n    .addConverterFactory(GsonConverterFactory.create())\n    .build()\n  \n  val service = retrofit.create(PostmanEchoService::class.java)\n  val serviceCall = service.postAction(body, \"post\")\n  \n  serviceCall.enqueue(object : Callback<Any> {\n    override fun onResponse(call: Call<Any>, response: Response<Any>) {\n      println(\"Request success with response: ${response.body()}\")\n    }\n  \n    override fun onFailure(call: Call<Any>, t: Throwable) {\n      println(\"Request has been failed for ${t.message} reason. $t\")\n    }\n  })\n  \n}\n\n@JvmSuppressWildcards\ninterface PostmanEchoService {\n  @POST(\"{action}\")\n  fun postAction(@Body body: String, @Path(\"action\") action: Any): Call<Any>\n}\n",
  "PUT Request": "import retrofit2.Call\nimport retrofit2.http.*\nimport retrofit2.Callback\nimport retrofit2.Response\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\n\nfun main() {\n  val headers = mapOf(\n    \"Content-Type\" to \"text/plain\"\n  )\n  val body = \"\"\"Etiam mi lacus, cursus vitae felis et, blandit pellentesque neque. Vestibulum eget nisi a tortor commodo dignissim.\\nQuisque ipsum ligula, faucibus a felis a, commodo elementum nisl. Mauris vulputate sapien et tincidunt viverra. Donec vitae velit nec metus.\"\"\"\n  val retrofit = Retrofit.Builder()\n    .baseUrl(\"https://postman-echo.com\")\n    .addConverterFactory(GsonConverterFactory.create())\n    .build()\n  \n  val service = retrofit.create(PostmanEchoService::class.java)\n  val serviceCall = service.putPut(headers, body)\n  \n  serviceCall.enqueue(object : Callback<Any> {\n    override fun onResponse(call: Call<Any>, response: Response<Any>) {\n      println(\"Request success with response: ${response.body()}\")\n    }\n  \n    override fun onFailure(call: Call<Any>, t: Throwable) {\n      println(\"Request has been failed for ${t.message} reason. $t\")\n    }\n  })\n  \n}\n\n@JvmSuppressWildcards\ninterface PostmanEchoService {\n  @PUT(\"put\")\n  fun putPut(@HeaderMap headers: Map<String, String>, @Body body: String): Call<Any>\n}\n",
  "PATCH Request": "import retrofit2.Call\nimport retrofit2.http.*\nimport retrofit2.Callback\nimport retrofit2.Response\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\n\nfun main() {\n  val headers = mapOf(\n    \"Content-Type\" to \"text/plain\"\n  )\n  val body = \"\"\"Curabitur auctor, elit nec pulvinar porttitor, ex augue condimentum enim, eget suscipit urna felis quis neque.\\nSuspendisse sit amet luctus massa, nec venenatis mi. Suspendisse tincidunt massa at nibh efficitur fringilla. Nam quis congue mi. Etiam volutpat.\"\"\"\n  val retrofit = Retrofit.Builder()\n    .baseUrl(\"https://postman-echo.com\")\n    .addConverterFactory(GsonConverterFactory.create())\n    .build()\n  \n  val service = retrofit.create(PostmanEchoService::class.java)\n  val serviceCall = service.patchPatch(headers, body)\n  \n  serviceCall.enqueue(object : Callback<Any> {\n    override fun onResponse(call: Call<Any>, response: Response<Any>) {\n      println(\"Request success with response: ${response.body()}\")\n    }\n  \n    override fun onFailure(call: Call<Any>, t: Throwable) {\n      println(\"Request has been failed for ${t.message} reason. $t\")\n    }\n  })\n  \n}\n\n@JvmSuppressWildcards\ninterface PostmanEchoService {\n  @PATCH(\"patch\")\n  fun patchPatch(@HeaderMap headers: Map<String, String>, @Body body: String): Call<Any>\n}\n",
  "DELETE Request": "import retrofit2.Call\nimport retrofit2.http.*\nimport retrofit2.Callback\nimport retrofit2.Response\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\n\nfun main() {\n  val headers = mapOf(\n    \"Content-Type\" to \"text/plain\"\n  )\n  val body = \"\"\"Donec fermentum, nisi sed cursus eleifend, nulla tortor ultricies tellus, ut vehicula orci arcu ut velit. In volutpat egestas dapibus.\\nMorbi condimentum vestibulum sapien. Etiam dignissim diam quis eros lobortis gravida vel lobortis est. Etiam gravida sed.\"\"\"\n  val retrofit = Retrofit.Builder()\n    .baseUrl(\"https://postman-echo.com\")\n    .addConverterFactory(GsonConverterFactory.create())\n    .build()\n  \n  val service = retrofit.create(PostmanEchoService::class.java)\n  val serviceCall = service.deleteDelete(headers, body)\n  \n  serviceCall.enqueue(object : Callback<Any> {\n    override fun onResponse(call: Call<Any>, response: Response<Any>) {\n      println(\"Request success with response: ${response.body()}\")\n    }\n  \n    override fun onFailure(call: Call<Any>, t: Throwable) {\n      println(\"Request has been failed for ${t.message} reason. $t\")\n    }\n  })\n  \n}\n\n@JvmSuppressWildcards\ninterface PostmanEchoService {\n  @DELETE(\"delete\")\n  fun deleteDelete(@HeaderMap headers: Map<String, String>, @Body body: String): Call<Any>\n}\n",
  "OPTIONS to postman echo": "import retrofit2.Call\nimport retrofit2.http.*\nimport retrofit2.Callback\nimport retrofit2.Response\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\n\nfun main() {\n  val headers = mapOf(\n    \"Content-Type\" to \"text/plain\"\n  )\n  val body = \"\"\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium. Praesent neque quam, tincidunt nec leo eget, rutrum vehicula magna.\\nMaecenas consequat elementum elit, id semper sem tristique et. Integer pulvinar enim quis consectetur interdum volutpat.\"\"\"\n  val retrofit = Retrofit.Builder()\n    .baseUrl(\"https://postman-echo.com\")\n    .addConverterFactory(GsonConverterFactory.create())\n    .build()\n  \n  val service = retrofit.create(PostmanEchoService::class.java)\n  val serviceCall = service.optionsPost(headers, body)\n  \n  serviceCall.enqueue(object : Callback<Any> {\n    override fun onResponse(call: Call<Any>, response: Response<Any>) {\n      println(\"Request success with response: ${response.body()}\")\n    }\n  \n    override fun onFailure(call: Call<Any>, t: Throwable) {\n      println(\"Request has been failed for ${t.message} reason. $t\")\n    }\n  })\n  \n}\n\n@JvmSuppressWildcards\ninterface PostmanEchoService {\n  @OPTIONS(\"post\")\n  fun optionsPost(@HeaderMap headers: Map<String, String>, @Body body: String): Call<Any>\n}\n",
  "LINK request": "import retrofit2.Call\nimport retrofit2.http.*\nimport retrofit2.Callback\nimport retrofit2.Response\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\n\nfun main() {\n  \n  val retrofit = Retrofit.Builder()\n    .baseUrl(\"https://mockbin.org\")\n    .addConverterFactory(GsonConverterFactory.create())\n    .build()\n  \n  val service = retrofit.create(MockbinService::class.java)\n  val serviceCall = service.linkRequest()\n  \n  serviceCall.enqueue(object : Callback<Any> {\n    override fun onResponse(call: Call<Any>, response: Response<Any>) {\n      println(\"Request success with response: ${response.body()}\")\n    }\n  \n    override fun onFailure(call: Call<Any>, t: Throwable) {\n      println(\"Request has been failed for ${t.message} reason. $t\")\n    }\n  })\n  \n}\n\n@JvmSuppressWildcards\ninterface MockbinService {\n  @LINK(\"request\")\n  fun linkRequest(): Call<Any>\n}\n",
  "UNLINK request": "import retrofit2.Call\nimport retrofit2.http.*\nimport retrofit2.Callback\nimport retrofit2.Response\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\n\nfun main() {\n  val headers = mapOf(\n    \"Content-Type\" to \"text/plain\"\n  )\n  val body = \"\"\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium. Praesent neque quam, tincidunt nec leo eget, rutrum vehicula magna.\\nMaecenas consequat elementum elit, id semper sem tristique et. Integer pulvinar enim quis consectetur interdum volutpat.\"\"\"\n  val retrofit = Retrofit.Builder()\n    .baseUrl(\"https://mockbin.org\")\n    .addConverterFactory(GsonConverterFactory.create())\n    .build()\n  \n  val service = retrofit.create(MockbinService::class.java)\n  val serviceCall = service.unlinkRequest(headers, body)\n  \n  serviceCall.enqueue(object : Callback<Any> {\n    override fun onResponse(call: Call<Any>, response: Response<Any>) {\n      println(\"Request success with response: ${response.body()}\")\n    }\n  \n    override fun onFailure(call: Call<Any>, t: Throwable) {\n      println(\"Request has been failed for ${t.message} reason. $t\")\n    }\n  })\n  \n}\n\n@JvmSuppressWildcards\ninterface MockbinService {\n  @UNLINK(\"request\")\n  fun unlinkRequest(@HeaderMap headers: Map<String, String>, @Body body: String): Call<Any>\n}\n",
  "LOCK request": "import retrofit2.Call\nimport retrofit2.http.*\nimport retrofit2.Callback\nimport retrofit2.Response\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\n\nfun main() {\n  val headers = mapOf(\n    \"Content-Type\" to \"text/plain\"\n  )\n  val body = \"\"\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium. Praesent neque quam, tincidunt nec leo eget, rutrum vehicula magna.\\nMaecenas consequat elementum elit, id semper sem tristique et. Integer pulvinar enim quis consectetur interdum volutpat.\"\"\"\n  val retrofit = Retrofit.Builder()\n    .baseUrl(\"https://mockbin.org\")\n    .addConverterFactory(GsonConverterFactory.create())\n    .build()\n  \n  val service = retrofit.create(MockbinService::class.java)\n  val serviceCall = service.lockRequest(headers, body)\n  \n  serviceCall.enqueue(object : Callback<Any> {\n    override fun onResponse(call: Call<Any>, response: Response<Any>) {\n      println(\"Request success with response: ${response.body()}\")\n    }\n  \n    override fun onFailure(call: Call<Any>, t: Throwable) {\n      println(\"Request has been failed for ${t.message} reason. $t\")\n    }\n  })\n  \n}\n\n@JvmSuppressWildcards\ninterface MockbinService {\n  @LOCK(\"request\")\n  fun lockRequest(@HeaderMap headers: Map<String, String>, @Body body: String): Call<Any>\n}\n",
  "UNLOCK request": "import retrofit2.Call\nimport retrofit2.http.*\nimport retrofit2.Callback\nimport retrofit2.Response\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\n\nfun main() {\n  \n  val retrofit = Retrofit.Builder()\n    .baseUrl(\"https://mockbin.org\")\n    .addConverterFactory(GsonConverterFactory.create())\n    .build()\n  \n  val service = retrofit.create(MockbinService::class.java)\n  val serviceCall = service.unlockRequest()\n  \n  serviceCall.enqueue(object : Callback<Any> {\n    override fun onResponse(call: Call<Any>, response: Response<Any>) {\n      println(\"Request success with response: ${response.body()}\")\n    }\n  \n    override fun onFailure(call: Call<Any>, t: Throwable) {\n      println(\"Request has been failed for ${t.message} reason. $t\")\n    }\n  })\n  \n}\n\n@JvmSuppressWildcards\ninterface MockbinService {\n  @UNLOCK(\"request\")\n  fun unlockRequest(): Call<Any>\n}\n",
  "PROPFIND request": "import retrofit2.Call\nimport retrofit2.http.*\nimport retrofit2.Callback\nimport retrofit2.Response\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\n\nfun main() {\n  val headers = mapOf(\n    \"Content-Type\" to \"text/plain\"\n  )\n  val body = \"\"\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium. Praesent neque quam, tincidunt nec leo eget, rutrum vehicula magna.\\nMaecenas consequat elementum elit, id semper sem tristique et. Integer pulvinar enim quis consectetur interdum volutpat.\"\"\"\n  val retrofit = Retrofit.Builder()\n    .baseUrl(\"https://mockbin.org\")\n    .addConverterFactory(GsonConverterFactory.create())\n    .build()\n  \n  val service = retrofit.create(MockbinService::class.java)\n  val serviceCall = service.propfindRequest(headers, body)\n  \n  serviceCall.enqueue(object : Callback<Any> {\n    override fun onResponse(call: Call<Any>, response: Response<Any>) {\n      println(\"Request success with response: ${response.body()}\")\n    }\n  \n    override fun onFailure(call: Call<Any>, t: Throwable) {\n      println(\"Request has been failed for ${t.message} reason. $t\")\n    }\n  })\n  \n}\n\n@JvmSuppressWildcards\ninterface MockbinService {\n  @PROPFIND(\"request\")\n  fun propfindRequest(@HeaderMap headers: Map<String, String>, @Body body: String): Call<Any>\n}\n",
  "PURGE Request": "import retrofit2.Call\nimport retrofit2.http.*\nimport retrofit2.Callback\nimport retrofit2.Response\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\n\nfun main() {\n  \n  val retrofit = Retrofit.Builder()\n    .baseUrl(\"https://mockbin.org\")\n    .addConverterFactory(GsonConverterFactory.create())\n    .build()\n  \n  val service = retrofit.create(MockbinService::class.java)\n  val serviceCall = service.purgeRequest()\n  \n  serviceCall.enqueue(object : Callback<Any> {\n    override fun onResponse(call: Call<Any>, response: Response<Any>) {\n      println(\"Request success with response: ${response.body()}\")\n    }\n  \n    override fun onFailure(call: Call<Any>, t: Throwable) {\n      println(\"Request has been failed for ${t.message} reason. $t\")\n    }\n  })\n  \n}\n\n@JvmSuppressWildcards\ninterface MockbinService {\n  @PURGE(\"request\")\n  fun purgeRequest(): Call<Any>\n}\n",
  "COPY Request": "import retrofit2.Call\nimport retrofit2.http.*\nimport retrofit2.Callback\nimport retrofit2.Response\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\n\nfun main() {\n  \n  val retrofit = Retrofit.Builder()\n    .baseUrl(\"https://mockbin.org\")\n    .addConverterFactory(GsonConverterFactory.create())\n    .build()\n  \n  val service = retrofit.create(MockbinService::class.java)\n  val serviceCall = service.copyRequest()\n  \n  serviceCall.enqueue(object : Callback<Any> {\n    override fun onResponse(call: Call<Any>, response: Response<Any>) {\n      println(\"Request success with response: ${response.body()}\")\n    }\n  \n    override fun onFailure(call: Call<Any>, t: Throwable) {\n      println(\"Request has been failed for ${t.message} reason. $t\")\n    }\n  })\n  \n}\n\n@JvmSuppressWildcards\ninterface MockbinService {\n  @COPY(\"request\")\n  fun copyRequest(): Call<Any>\n}\n",
  "Post file": "import retrofit2.Call\nimport retrofit2.http.*\nimport retrofit2.Callback\nimport retrofit2.Response\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\n\nfun main() {\n  val body = HashMap<String, RequestBody>()\n  \n  val uohou0 = RequestBody.create(MediaType.parse(\"multipart/form-data\"), \"/Users/umesh/Desktop/Screenshot 2019-09-29 at 10.50.30 AM.png\");\n  \n  body.put(\"uohou\", uohou0)\n  \n  val retrofit = Retrofit.Builder()\n    .baseUrl(\"https://postman-echo.com\")\n    .addConverterFactory(GsonConverterFactory.create())\n    .build()\n  \n  val service = retrofit.create(PostmanEchoService::class.java)\n  val serviceCall = service.postPost(body)\n  \n  serviceCall.enqueue(object : Callback<Any> {\n    override fun onResponse(call: Call<Any>, response: Response<Any>) {\n      println(\"Request success with response: ${response.body()}\")\n    }\n  \n    override fun onFailure(call: Call<Any>, t: Throwable) {\n      println(\"Request has been failed for ${t.message} reason. $t\")\n    }\n  })\n  \n}\n\n@JvmSuppressWildcards\ninterface PostmanEchoService {\n  @Multipart\n  @POST(\"post\")\n  fun postPost(@PartMap body: Map<String, RequestBody>): Call<Any>\n}\n",
  "Post multiple files in the same parameter  via form-data": "import retrofit2.Call\nimport retrofit2.http.*\nimport retrofit2.Callback\nimport retrofit2.Response\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\n\nfun main() {\n  val body = HashMap<String, RequestBody>()\n  \n  val multiplefiles0 = RequestBody.create(MediaType.parse(\"multipart/form-data\"), \"/Users/shreyshah/Desktop/openapi3.json\");\n  val multiplefiles1 = RequestBody.create(MediaType.parse(\"multipart/form-data\"), \"/Users/shreyshah/Desktop/openapi3.yaml\");\n  \n  body.put(\"multiple files\", multiplefiles0)\n  body.put(\"multiple files\", multiplefiles1)\n  \n  val retrofit = Retrofit.Builder()\n    .baseUrl(\"https://postman-echo.com\")\n    .addConverterFactory(GsonConverterFactory.create())\n    .build()\n  \n  val service = retrofit.create(PostmanEchoService::class.java)\n  val serviceCall = service.postPost(body)\n  \n  serviceCall.enqueue(object : Callback<Any> {\n    override fun onResponse(call: Call<Any>, response: Response<Any>) {\n      println(\"Request success with response: ${response.body()}\")\n    }\n  \n    override fun onFailure(call: Call<Any>, t: Throwable) {\n      println(\"Request has been failed for ${t.message} reason. $t\")\n    }\n  })\n  \n}\n\n@JvmSuppressWildcards\ninterface PostmanEchoService {\n  @Multipart\n  @POST(\"post\")\n  fun postPost(@PartMap body: Map<String, RequestBody>): Call<Any>\n}\n",
  "Post a file via form-data, without file src specified": "import retrofit2.Call\nimport retrofit2.http.*\nimport retrofit2.Callback\nimport retrofit2.Response\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\n\nfun main() {\n  val body = HashMap<String, RequestBody>()\n  \n  val key0 = RequestBody.create(MediaType.parse(\"multipart/form-data\"), \"/path/to/file\");\n  \n  body.put(\"key\", key0)\n  \n  val retrofit = Retrofit.Builder()\n    .baseUrl(\"https://postman-echo.com\")\n    .addConverterFactory(GsonConverterFactory.create())\n    .build()\n  \n  val service = retrofit.create(PostmanEchoService::class.java)\n  val serviceCall = service.postPost(body)\n  \n  serviceCall.enqueue(object : Callback<Any> {\n    override fun onResponse(call: Call<Any>, response: Response<Any>) {\n      println(\"Request success with response: ${response.body()}\")\n    }\n  \n    override fun onFailure(call: Call<Any>, t: Throwable) {\n      println(\"Request has been failed for ${t.message} reason. $t\")\n    }\n  })\n  \n}\n\n@JvmSuppressWildcards\ninterface PostmanEchoService {\n  @Multipart\n  @POST(\"post\")\n  fun postPost(@PartMap body: Map<String, RequestBody>): Call<Any>\n}\n",
  "Multiple form-data fields with same names": "import retrofit2.Call\nimport retrofit2.http.*\nimport retrofit2.Callback\nimport retrofit2.Response\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\n\nfun main() {\n  val body = HashMap<String, RequestBody>()\n  val key0 = RequestBody.create(MediaType.parse(\"text/plain\"), \"value1\")\n  val key1 = RequestBody.create(MediaType.parse(\"text/plain\"), \"value2\")\n  \n  val file2 = RequestBody.create(MediaType.parse(\"multipart/form-data\"), \"/Users/shreyshah/Desktop/openapi3.json\");\n  val file3 = RequestBody.create(MediaType.parse(\"multipart/form-data\"), \"/Users/shreyshah/Desktop/test.c\");\n  \n  body.put(\"key\", key0)\n  body.put(\"key\", key1)\n  body.put(\"file\", file2)\n  body.put(\"file\", file3)\n  \n  val retrofit = Retrofit.Builder()\n    .baseUrl(\"https://postman-echo.com\")\n    .addConverterFactory(GsonConverterFactory.create())\n    .build()\n  \n  val service = retrofit.create(PostmanEchoService::class.java)\n  val serviceCall = service.postPost(body)\n  \n  serviceCall.enqueue(object : Callback<Any> {\n    override fun onResponse(call: Call<Any>, response: Response<Any>) {\n      println(\"Request success with response: ${response.body()}\")\n    }\n  \n    override fun onFailure(call: Call<Any>, t: Throwable) {\n      println(\"Request has been failed for ${t.message} reason. $t\")\n    }\n  })\n  \n}\n\n@JvmSuppressWildcards\ninterface PostmanEchoService {\n  @Multipart\n  @POST(\"post\")\n  fun postPost(@PartMap body: Map<String, RequestBody>): Call<Any>\n}\n",
  "Multiple query params with same names": "import retrofit2.Call\nimport retrofit2.http.*\nimport retrofit2.Callback\nimport retrofit2.Response\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\n\nfun main() {\n  \n  val retrofit = Retrofit.Builder()\n    .baseUrl(\"https://postman-echo.com\")\n    .addConverterFactory(GsonConverterFactory.create())\n    .build()\n  \n  val service = retrofit.create(PostmanEchoService::class.java)\n  val serviceCall = service.getGet()\n  \n  serviceCall.enqueue(object : Callback<Any> {\n    override fun onResponse(call: Call<Any>, response: Response<Any>) {\n      println(\"Request success with response: ${response.body()}\")\n    }\n  \n    override fun onFailure(call: Call<Any>, t: Throwable) {\n      println(\"Request has been failed for ${t.message} reason. $t\")\n    }\n  })\n  \n}\n\n@JvmSuppressWildcards\ninterface PostmanEchoService {\n  @GET(\"get\")\n  fun getGet(): Call<Any>\n}\n",
  "GraphQL query": "import retrofit2.Call\nimport retrofit2.http.*\nimport retrofit2.Callback\nimport retrofit2.Response\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\n\nfun main() {\n  val headers = mapOf(\n    \"Content-Type\" to \"application/json\"\n  )\n  \n  val retrofit = Retrofit.Builder()\n    .baseUrl(\"https://api.github.com\")\n    .addConverterFactory(GsonConverterFactory.create())\n    .build()\n  \n  val service = retrofit.create(GithubService::class.java)\n  val serviceCall = service.postGraphql(headers, GraphqlQuery())\n  \n  serviceCall.enqueue(object : Callback<Any> {\n    override fun onResponse(call: Call<Any>, response: Response<Any>) {\n      println(\"Request success with response: ${response.body()}\")\n    }\n  \n    override fun onFailure(call: Call<Any>, t: Throwable) {\n      println(\"Request has been failed for ${t.message} reason. $t\")\n    }\n  })\n  \n}\n\nclass GraphqlQuery() {\n  val query = \"query {\\n    __schema\\n}\"\n  val variables = \"{}\"\n}\n\n@JvmSuppressWildcards\ninterface GithubService {\n  @POST(\"graphql\")\n  fun postGraphql(@HeaderMap headers: Map<String, String>, @Body body: GraphqlQuery): Call<Any>\n}\n",
  "POST textxml with raw": "import retrofit2.Call\nimport retrofit2.http.*\nimport retrofit2.Callback\nimport retrofit2.Response\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\n\nfun main() {\n  val headers = mapOf(\n    \"Content-Type\" to \"text/xml\"\n  )\n  val body = \"\"\"<xml>\\n\\tTest Test!@#\\$%^&*()+POL:},\\'\\';,[;[;\\n</xml>\"\"\"\n  val retrofit = Retrofit.Builder()\n    .baseUrl(\"https://postman-echo.com\")\n    .addConverterFactory(GsonConverterFactory.create())\n    .build()\n  \n  val service = retrofit.create(PostmanEchoService::class.java)\n  val serviceCall = service.postPost(headers, body)\n  \n  serviceCall.enqueue(object : Callback<Any> {\n    override fun onResponse(call: Call<Any>, response: Response<Any>) {\n      println(\"Request success with response: ${response.body()}\")\n    }\n  \n    override fun onFailure(call: Call<Any>, t: Throwable) {\n      println(\"Request has been failed for ${t.message} reason. $t\")\n    }\n  })\n  \n}\n\n@JvmSuppressWildcards\ninterface PostmanEchoService {\n  @POST(\"post\")\n  fun postPost(@HeaderMap headers: Map<String, String>, @Body body: String): Call<Any>\n}\n",
  "POST texthtml with raw": "import retrofit2.Call\nimport retrofit2.http.*\nimport retrofit2.Callback\nimport retrofit2.Response\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\n\nfun main() {\n  val headers = mapOf(\n    \"Content-Type\" to \"text/html\"\n  )\n  val body = \"\"\"<html>\\n  Test Test !@#\\$%^&*()+POL:},\\'\\';,[;[;\\n</html>\"\"\"\n  val retrofit = Retrofit.Builder()\n    .baseUrl(\"https://postman-echo.com\")\n    .addConverterFactory(GsonConverterFactory.create())\n    .build()\n  \n  val service = retrofit.create(PostmanEchoService::class.java)\n  val serviceCall = service.postPost(headers, body)\n  \n  serviceCall.enqueue(object : Callback<Any> {\n    override fun onResponse(call: Call<Any>, response: Response<Any>) {\n      println(\"Request success with response: ${response.body()}\")\n    }\n  \n    override fun onFailure(call: Call<Any>, t: Throwable) {\n      println(\"Request has been failed for ${t.message} reason. $t\")\n    }\n  })\n  \n}\n\n@JvmSuppressWildcards\ninterface PostmanEchoService {\n  @POST(\"post\")\n  fun postPost(@HeaderMap headers: Map<String, String>, @Body body: String): Call<Any>\n}\n"
}
